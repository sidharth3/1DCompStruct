module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield
   //      output row1,
//     output row2,
//     output row3,
//     output row4,
//     output row5,
    input player2left,
    input player2right,
    input player1left,
    input player1right
  ) {
 
  sig rst;                  // reset signal

  .clk(clk) {
    reset_conditioner reset_cond;
    //button_conditioner button_cond;
    //edge_detector edge_detector (#RISE(1), #FALL(0));
   
    .rst(rst){
      //display display;
      //gamestates gamestates;
      car car1;
      }
  } 
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    led = rst;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    //display.update = 1;
    //player1left = io_button[0];
    io_led[1] = b0010;
    car1.position = b0010;
    car1.left = io_button[0];
    car1.right = io_button[1];
    io_led[2][0] = io_button[0];
    io_led[2][1] = io_button[1];
    io_led[0] = car1.currentPosition;
    //gamestates.car1left = io_button[0];
    //gamestates.car2left = io_button[1];
   // gamestates.car1right = io_button[2];
   // gamestates.car2right = io_button[3];
    //display.color = gamestates.row1;
//     row1 = display.led;
//     display.color = gamestates.row1;
//     row2 = display.led;
//     display.color = gamestates.row1;
//     row3 = display.led;
//     display.color = gamestates.row1;
//     row4 = display.led;
//     display.color = gamestates.row1;
//     row5 = display.led;
//     io_led[0][0] = gamestates.currentState[0];
//     io_led[0][1] = gamestates.currentState[1];
//     io_led[0][2] = gamestates.currentState[2];
    
}}