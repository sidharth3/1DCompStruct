module forled #(
   PIXEL_COUNT = 10 : PIXEL_COUNT > 0
  )(
    input clk,  // clock
    input rst,  // reset
    input color[4][24],
    output pixel[$clog2(PIXEL_COUNT)],
    output led,
    input update
  ) {
  
  .clk(clk) {
    .rst(rst) {
      fsm state = {SEND_PIXEL, RESET};
      dff pixel_ctr[$clog2(PIXEL_COUNT)];
      dff bit_ctr[5];
      dff ctr[6];
      dff rst_ctr [$clog2(2500)];
    }
  }
  
  sig bits[24];
  
  always {
    led = 0;
    
    bits = color[pixel_ctr.q];
    
    
    pixel = pixel_ctr.q;
    case (state.q) {
      state.SEND_PIXEL:
        if (bits[bit_ctr.q])
          led = ctr.q < 45;
        else
          led = ctr.q < 17;
        
        ctr.d = ctr.q + 1;
        if (ctr.q == 62){
          ctr.d = 0;
          
          bit_ctr.d = bit_ctr.q + 1;
          if (bit_ctr.q == 23) {
            bit_ctr.d = 0;
            pixel_ctr.d = pixel_ctr.q + 1;
              
            if (pixel_ctr.q == PIXEL_COUNT-1) {
              pixel_ctr.d = 0;
              state.d = state.RESET;
            }
          }
        }
      
      state.RESET:
        if (&rst_ctr.q) {
          if (update) {
            rst_ctr.d = 0;
            state.d = state.SEND_PIXEL;
          }
        } else {
          rst_ctr.d = rst_ctr.q + 1;
        }
    }
  }
}