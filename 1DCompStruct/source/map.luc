module map (//mapping module that returns a new set of obstacles/powerups for the 4 lanes
    //input clk,  // clock
    //input rst,  // reset
    input address[5],
    input level[2],
    output next_row[8]
  ) {
  
  //var rows= {8b0, 8b10sss};
  const LEVEL1 = {8x{b1},8b10000010, 8b0, 8b00010100, 8b0, 8b10001000, 8b0, 8b00011000, 8b0, 8b00100100, 8b01000000, 8b00000010, 8b00010000,
  8b0, 8b00100100, 8b0, 8b01000100, 8b0, 8b00011000, 8b0, 8b00001000, 8b01000000}; // 21

  const LEVEL2= {8x{b1},8b10001000,8b00000001,8b00001000,8b01000000,8b01100110,8b00000000,8b00010001,8b10001000,8b00000010,8b00010100,
  8b00010000,8b00100001,8b00001000,8b01000000, 8b00010100,8b00000100,8b00100000,8b00101000,8b00010000,8b01000010}; //20
  
  const LEVEL3 = {8x{b1},8b10011001, 8b0, 8b01100110, 8b00100010,8b0, 8b10001000, 8b10000000, 8b10000010, 8b00001000, 8b00101000, 8b00000100,
  8b00010000, 8b00000001, 8b00010000, 8b01000000, 8b00010100, 8b0, 8b00010001, 8b00010000, 8b01000100}; // 21 
  always {
    case (level){
      b01:
        next_row = LEVEL1[address];
      b10:
        next_row = LEVEL2[address];
      b11:
        next_row = LEVEL3[address];
      default:
        next_row = 8b0;
      
    }
    //should output a sequence that can be initialized to the first register
    // Left car catches red while right car catches green.
    // empty = 00 , green = 10, red = 01
    // 
}
}