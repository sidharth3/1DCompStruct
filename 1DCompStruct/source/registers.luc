module registers (
    input clk,  // clock
    input rst,  // reset
    input shift,
    output lane1val[2],
    output lane2val[2],
    output lane3val[2],
    output lane4val[2],
    output row1[4][24],
    output row2[4][24],
    output row3[4][24],
    output row4[4][24],
    output row5[4][24]
  ) {
  alu alu;
  map map;
  ledrow1map ledrow1map;
  ledrow2map ledrow2map;
  ledrow3map ledrow3map;
  ledrow4map ledrow4map;
  ledrow5map ledrow5map;
  //sig templane1[2];
  //sig templane2[2];
  //sig templane3[2];
  //sig templane4[2];
  .clk(clk){
   fsm levels = {LEVEL1,LEVEL2,LEVEL3,IDLE};  
 .rst(rst){
   smallgc ctr;
      }
   dff lane1[10](#INIT(0000000000));
   dff lane2[10](#INIT(0000000000));
   dff lane3[10](#INIT(0000000000));
   dff lane4[10](#INIT(0000000000));
   }
  always {
    ledrow1map.lane1 = lane1.q;
    ledrow1map.lane2 = lane2.q;
    ledrow1map.lane3 = lane3.q;
    ledrow1map.lane4 = lane4.q;
    ledrow2map.lane1 = lane1.q;
    ledrow2map.lane2 = lane2.q;
    ledrow2map.lane3 = lane3.q;
    ledrow2map.lane4 = lane4.q;
    ledrow3map.lane1 = lane1.q;
    ledrow3map.lane2 = lane2.q;
    ledrow3map.lane3 = lane3.q;
    ledrow3map.lane4 = lane4.q;
    ledrow4map.lane1 = lane1.q;
    ledrow4map.lane2 = lane2.q;
    ledrow4map.lane3 = lane3.q;
    ledrow4map.lane4 = lane4.q;
    ledrow5map.lane1 = lane1.q;
    ledrow5map.lane2 = lane2.q;
    ledrow5map.lane3 = lane3.q;
    ledrow5map.lane4 = lane4.q;
    
    row1 = ledrow1map.color_row1;
    row2 = ledrow2map.color_row2;
    row3 = ledrow3map.color_row3;
    row4 = ledrow4map.color_row4;
    row5 = ledrow5map.color_row5;
    ctr.reset = 0;
    map.address = 0;
    alu.a = 0;
    alu.b = 0;
    alu.alufn = 6b0000000;
    lane1val = lane1.q[9:8];
    lane2val = lane2.q[9:8];
    lane3val = lane3.q[9:8];
    lane4val = lane4.q[9:8];
    if(rst){
      levels.d = levels.LEVEL1;
      }
    case (levels.q){
      levels.LEVEL1:
        map.level = b01;
        //io_led[1] = b01;
        if (map.next_row == 8x{b1}){
        ctr.reset = 1;
        levels.d = levels.LEVEL2;      
        }
      levels.LEVEL2:
        map.level = b10;
        //io_led[1] = b10;
        if (map.next_row == 8x{b1}){
        ctr.reset = 1;
        levels.d = levels.LEVEL3;      
       }
      levels.LEVEL3:
        map.level = b11;
        //io_led[1] = b11;
        if (map.next_row == 8x{b1}){
        ctr.reset = 1;
        levels.d = levels.IDLE;      
       }
      default:
        map.level = b00;
        //io_led[1] = 8x{b1};
      }
   
      if(shift){
        map.address = ctr.out;
        alu.alufn = 6b100000;
        alu.a = lane1.q;
        alu.b = 2;
        lane1.d = alu.c[9:0];
        lane1.d[1:0] = map.next_row[1:0];
        alu.a = lane2.q;
        alu.b = 2;
        lane2.d = alu.c[9:0];
        lane2.d[1:0] = map.next_row[3:2];
        alu.a = lane3.q;
        alu.b = 2;
        lane3.d = alu.c[9:0];
        lane3.d = map.next_row[5:4];
        alu.a = lane4.q;
        alu.b = 2;
        lane4.d = alu.c[9:0]; 
        lane4.d = map.next_row[7:6];  
        }
      }
  }

