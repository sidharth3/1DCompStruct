/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module registers_28 (
    input clk,
    input rst,
    input shift,
    input reset,
    input [0:0] set,
    output reg [7:0] l1,
    output reg [7:0] l2,
    output reg [1:0] lane1val,
    output reg [1:0] lane2val,
    output reg [1:0] lane3val,
    output reg [1:0] lane4val,
    output reg [95:0] row1,
    output reg [95:0] row2,
    output reg [95:0] row3,
    output reg [95:0] row4,
    output reg [95:0] row5,
    output reg [7:0] out,
    output reg [2:0] level,
    output reg [0:0] levelUp
  );
  
  
  
  wire [16-1:0] M_alu_c;
  reg [6-1:0] M_alu_alufn;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  alu_19 alu (
    .alufn(M_alu_alufn),
    .a(M_alu_a),
    .b(M_alu_b),
    .c(M_alu_c)
  );
  
  wire [8-1:0] M_map_next_row;
  reg [1-1:0] M_map_set;
  reg [6-1:0] M_map_address;
  reg [3-1:0] M_map_level;
  map_38 map (
    .set(M_map_set),
    .address(M_map_address),
    .level(M_map_level),
    .next_row(M_map_next_row)
  );
  
  wire [96-1:0] M_ledrow1map_color_row1;
  reg [10-1:0] M_ledrow1map_lane1;
  reg [10-1:0] M_ledrow1map_lane2;
  reg [10-1:0] M_ledrow1map_lane3;
  reg [10-1:0] M_ledrow1map_lane4;
  ledrow1map_39 ledrow1map (
    .lane1(M_ledrow1map_lane1),
    .lane2(M_ledrow1map_lane2),
    .lane3(M_ledrow1map_lane3),
    .lane4(M_ledrow1map_lane4),
    .color_row1(M_ledrow1map_color_row1)
  );
  
  wire [96-1:0] M_ledrow2map_color_row2;
  reg [10-1:0] M_ledrow2map_lane1;
  reg [10-1:0] M_ledrow2map_lane2;
  reg [10-1:0] M_ledrow2map_lane3;
  reg [10-1:0] M_ledrow2map_lane4;
  ledrow2map_40 ledrow2map (
    .lane1(M_ledrow2map_lane1),
    .lane2(M_ledrow2map_lane2),
    .lane3(M_ledrow2map_lane3),
    .lane4(M_ledrow2map_lane4),
    .color_row2(M_ledrow2map_color_row2)
  );
  
  wire [96-1:0] M_ledrow3map_color_row3;
  reg [10-1:0] M_ledrow3map_lane1;
  reg [10-1:0] M_ledrow3map_lane2;
  reg [10-1:0] M_ledrow3map_lane3;
  reg [10-1:0] M_ledrow3map_lane4;
  ledrow3map_41 ledrow3map (
    .lane1(M_ledrow3map_lane1),
    .lane2(M_ledrow3map_lane2),
    .lane3(M_ledrow3map_lane3),
    .lane4(M_ledrow3map_lane4),
    .color_row3(M_ledrow3map_color_row3)
  );
  
  wire [96-1:0] M_ledrow4map_color_row4;
  reg [10-1:0] M_ledrow4map_lane1;
  reg [10-1:0] M_ledrow4map_lane2;
  reg [10-1:0] M_ledrow4map_lane3;
  reg [10-1:0] M_ledrow4map_lane4;
  ledrow4map_42 ledrow4map (
    .lane1(M_ledrow4map_lane1),
    .lane2(M_ledrow4map_lane2),
    .lane3(M_ledrow4map_lane3),
    .lane4(M_ledrow4map_lane4),
    .color_row4(M_ledrow4map_color_row4)
  );
  
  wire [96-1:0] M_ledrow5map_color_row5;
  reg [10-1:0] M_ledrow5map_lane1;
  reg [10-1:0] M_ledrow5map_lane2;
  reg [10-1:0] M_ledrow5map_lane3;
  reg [10-1:0] M_ledrow5map_lane4;
  ledrow5map_43 ledrow5map (
    .lane1(M_ledrow5map_lane1),
    .lane2(M_ledrow5map_lane2),
    .lane3(M_ledrow5map_lane3),
    .lane4(M_ledrow5map_lane4),
    .color_row5(M_ledrow5map_color_row5)
  );
  
  reg [9:0] templane1;
  
  reg [9:0] templane2;
  
  reg [9:0] templane3;
  
  reg [9:0] templane4;
  
  reg [5:0] M_addr_d, M_addr_q = 1'h0;
  reg [9:0] M_lane1_d, M_lane1_q = 1'h0;
  reg [9:0] M_lane2_d, M_lane2_q = 1'h0;
  reg [9:0] M_lane3_d, M_lane3_q = 1'h0;
  reg [9:0] M_lane4_d, M_lane4_q = 1'h0;
  reg [2:0] M_levelReg_d, M_levelReg_q = 1'h0;
  reg [4:0] M_loop_d, M_loop_q = 1'h0;
  wire [5-1:0] M_ctr_out;
  reg [1-1:0] M_ctr_reset;
  smallgc_44 ctr (
    .clk(clk),
    .rst(rst),
    .reset(M_ctr_reset),
    .out(M_ctr_out)
  );
  
  always @* begin
    M_lane4_d = M_lane4_q;
    M_levelReg_d = M_levelReg_q;
    M_loop_d = M_loop_q;
    M_addr_d = M_addr_q;
    M_lane2_d = M_lane2_q;
    M_lane3_d = M_lane3_q;
    M_lane1_d = M_lane1_q;
    
    l1 = M_lane3_q[0+7-:8];
    l2 = M_lane4_q[0+7-:8];
    M_ledrow1map_lane1 = M_lane1_q;
    M_ledrow1map_lane2 = M_lane2_q;
    M_ledrow1map_lane3 = M_lane3_q;
    M_ledrow1map_lane4 = M_lane4_q;
    M_ledrow2map_lane1 = M_lane1_q;
    M_ledrow2map_lane2 = M_lane2_q;
    M_ledrow2map_lane3 = M_lane3_q;
    M_ledrow2map_lane4 = M_lane4_q;
    M_ledrow3map_lane1 = M_lane1_q;
    M_ledrow3map_lane2 = M_lane2_q;
    M_ledrow3map_lane3 = M_lane3_q;
    M_ledrow3map_lane4 = M_lane4_q;
    M_ledrow4map_lane1 = M_lane1_q;
    M_ledrow4map_lane2 = M_lane2_q;
    M_ledrow4map_lane3 = M_lane3_q;
    M_ledrow4map_lane4 = M_lane4_q;
    M_ledrow5map_lane1 = M_lane1_q;
    M_ledrow5map_lane2 = M_lane2_q;
    M_ledrow5map_lane3 = M_lane3_q;
    M_ledrow5map_lane4 = M_lane4_q;
    row1 = M_ledrow1map_color_row1;
    row2 = M_ledrow2map_color_row2;
    row3 = M_ledrow3map_color_row3;
    row4 = M_ledrow4map_color_row4;
    row5 = M_ledrow5map_color_row5;
    M_ctr_reset = 1'h0;
    M_map_address = 1'h0;
    M_alu_a = 1'h0;
    M_alu_b = 1'h0;
    M_alu_alufn = 6'h00;
    lane1val = M_lane1_q[8+1-:2];
    lane2val = M_lane2_q[8+1-:2];
    lane3val = M_lane3_q[8+1-:2];
    lane4val = M_lane4_q[8+1-:2];
    if (reset) begin
      M_levelReg_d = 2'h1;
      M_loop_d = 1'h0;
      M_addr_d = 1'h0;
      M_lane1_d = 10'h000;
      M_lane2_d = 10'h000;
      M_lane3_d = 10'h000;
      M_lane4_d = 10'h000;
    end
    M_map_set = set;
    M_map_level = M_levelReg_q;
    if (M_levelReg_q == 1'h0) begin
      M_levelReg_d = 2'h1;
    end
    level = M_levelReg_q;
    levelUp = 1'h0;
    out = M_map_next_row;
    M_map_address = M_addr_q;
    if (M_map_next_row == 8'hff) begin
      M_levelReg_d = M_levelReg_q + 1'h1;
      M_addr_d = 1'h0;
      levelUp = 1'h1;
    end
    if (shift == 1'h1) begin
      M_loop_d = M_loop_q + 1'h1;
      M_alu_alufn = 6'h20;
      M_alu_b = 2'h2;
      if (M_loop_q == 1'h0) begin
        M_alu_a = M_lane1_q;
        templane1 = M_alu_c;
        M_lane1_d = {templane1[2+7-:8], M_map_next_row[0+1-:2]};
      end else begin
        if (M_loop_q == 1'h1) begin
          M_alu_a = M_lane2_q;
          templane2 = M_alu_c;
          M_lane2_d = {templane2[2+7-:8], M_map_next_row[2+1-:2]};
        end else begin
          if (M_loop_q == 2'h2) begin
            M_alu_a = M_lane3_q;
            templane3 = M_alu_c;
            M_lane3_d = {templane3[2+7-:8], M_map_next_row[4+1-:2]};
          end else begin
            if (M_loop_q == 2'h3) begin
              M_alu_a = M_lane4_q;
              templane4 = M_alu_c;
              M_lane4_d = {templane4[2+7-:8], M_map_next_row[6+1-:2]};
              M_addr_d = M_addr_q + 1'h1;
              M_loop_d = 1'h0;
            end
          end
        end
      end
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_addr_q <= 1'h0;
      M_lane1_q <= 1'h0;
      M_lane2_q <= 1'h0;
      M_lane3_q <= 1'h0;
      M_lane4_q <= 1'h0;
      M_levelReg_q <= 1'h0;
      M_loop_q <= 1'h0;
    end else begin
      M_addr_q <= M_addr_d;
      M_lane1_q <= M_lane1_d;
      M_lane2_q <= M_lane2_d;
      M_lane3_q <= M_lane3_d;
      M_lane4_q <= M_lane4_d;
      M_levelReg_q <= M_levelReg_d;
      M_loop_q <= M_loop_d;
    end
  end
  
endmodule
