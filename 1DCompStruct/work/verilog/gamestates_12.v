/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module gamestates_12 (
    input clk,
    input rst,
    input car1left,
    input car1right,
    input car2left,
    input car2right,
    output reg [95:0] row1,
    output reg [95:0] row2,
    output reg [95:0] row3,
    output reg [95:0] row4,
    output reg [95:0] row5,
    output reg [4:0] currentState,
    output reg [7:0] ll1,
    output reg [7:0] ll2,
    output reg [7:0] out,
    output reg fail,
    output reg [3:0] car1Pos,
    output reg [3:0] car2Pos,
    output reg [95:0] rowcar,
    output reg [7:0] debug
  );
  
  
  
  localparam IDLE_gamestates = 3'd0;
  localparam SHIFT_gamestates = 3'd1;
  localparam CAR1LEFT_gamestates = 3'd2;
  localparam CAR1RIGHT_gamestates = 3'd3;
  localparam CAR2LEFT_gamestates = 3'd4;
  localparam CAR2RIGHT_gamestates = 3'd5;
  localparam FAIL_gamestates = 3'd6;
  
  reg [2:0] M_gamestates_d, M_gamestates_q = IDLE_gamestates;
  wire [4-1:0] M_car1_currentPosition;
  reg [1-1:0] M_car1_left;
  reg [1-1:0] M_car1_right;
  reg [1-1:0] M_car1_reset;
  reg [4-1:0] M_car1_position;
  car_17 car1 (
    .clk(clk),
    .rst(rst),
    .left(M_car1_left),
    .right(M_car1_right),
    .reset(M_car1_reset),
    .position(M_car1_position),
    .currentPosition(M_car1_currentPosition)
  );
  wire [4-1:0] M_car2_currentPosition;
  reg [1-1:0] M_car2_left;
  reg [1-1:0] M_car2_right;
  reg [1-1:0] M_car2_reset;
  reg [4-1:0] M_car2_position;
  car_17 car2 (
    .clk(clk),
    .rst(rst),
    .left(M_car2_left),
    .right(M_car2_right),
    .reset(M_car2_reset),
    .position(M_car2_position),
    .currentPosition(M_car2_currentPosition)
  );
  wire [8-1:0] M_register_l1;
  wire [8-1:0] M_register_l2;
  wire [2-1:0] M_register_lane1val;
  wire [2-1:0] M_register_lane2val;
  wire [2-1:0] M_register_lane3val;
  wire [2-1:0] M_register_lane4val;
  wire [96-1:0] M_register_row1;
  wire [96-1:0] M_register_row2;
  wire [96-1:0] M_register_row3;
  wire [96-1:0] M_register_row4;
  wire [96-1:0] M_register_row5;
  wire [8-1:0] M_register_out;
  reg [1-1:0] M_register_shift;
  registers_19 register (
    .clk(clk),
    .rst(rst),
    .shift(M_register_shift),
    .l1(M_register_l1),
    .l2(M_register_l2),
    .lane1val(M_register_lane1val),
    .lane2val(M_register_lane2val),
    .lane3val(M_register_lane3val),
    .lane4val(M_register_lane4val),
    .row1(M_register_row1),
    .row2(M_register_row2),
    .row3(M_register_row3),
    .row4(M_register_row4),
    .row5(M_register_row5),
    .out(M_register_out)
  );
  reg [25:0] M_counter_d, M_counter_q = 1'h0;
  
  wire [96-1:0] M_ledrowcars_colorrowcar;
  reg [4-1:0] M_ledrowcars_car1;
  reg [4-1:0] M_ledrowcars_car2;
  ledrowcars_20 ledrowcars (
    .car1(M_ledrowcars_car1),
    .car2(M_ledrowcars_car2),
    .colorrowcar(M_ledrowcars_colorrowcar)
  );
  
  always @* begin
    M_gamestates_d = M_gamestates_q;
    M_counter_d = M_counter_q;
    
    fail = 1'h0;
    M_car1_reset = 1'h0;
    M_car2_reset = 1'h0;
    M_car1_position = 4'h3;
    M_car2_position = 4'h3;
    M_car1_left = car1left;
    M_car1_right = car1right;
    M_car2_left = car2left;
    M_car2_right = car2right;
    car1Pos = M_car1_currentPosition;
    car2Pos = M_car2_currentPosition;
    M_ledrowcars_car1 = M_car1_currentPosition;
    M_ledrowcars_car2 = M_car2_currentPosition;
    currentState[0+0-:1] = 1'h0;
    currentState[1+0-:1] = 1'h0;
    currentState[2+0-:1] = 1'h0;
    row1 = M_register_row1;
    row2 = M_register_row2;
    row3 = M_register_row3;
    row4 = M_register_row4;
    row5 = M_register_row5;
    rowcar = M_ledrowcars_colorrowcar;
    M_register_shift = 1'h0;
    ll1 = M_register_l1;
    ll2 = M_register_l2;
    out = M_register_out;
    M_counter_d = M_counter_q + 1'h1;
    debug = M_car2_currentPosition[2+1-:2] & M_register_lane4val;
    
    case (M_gamestates_q)
      IDLE_gamestates: begin
        currentState[0+0-:1] = 5'h01;
        if (M_counter_q == 26'h3ffffff) begin
          M_gamestates_d = SHIFT_gamestates;
        end
        if (car1left) begin
          M_gamestates_d = CAR1LEFT_gamestates;
        end
        if (car1right) begin
          M_gamestates_d = CAR1RIGHT_gamestates;
        end
        if (car2left) begin
          M_gamestates_d = CAR2LEFT_gamestates;
        end
        if (car2right) begin
          M_gamestates_d = CAR2RIGHT_gamestates;
        end
      end
      SHIFT_gamestates: begin
        currentState = 5'h02;
        if ((M_car1_currentPosition[0+1-:2] & M_register_lane1val) == 2'h1) begin
          M_gamestates_d = FAIL_gamestates;
        end
        if ((M_car1_currentPosition[2+1-:2] & M_register_lane2val) == 2'h1) begin
          M_gamestates_d = FAIL_gamestates;
        end
        if ((M_car2_currentPosition[0+1-:2] & M_register_lane3val) == 2'h2) begin
          M_gamestates_d = FAIL_gamestates;
        end
        if ((M_car2_currentPosition[2+1-:2] & M_register_lane4val) == 2'h2) begin
          M_gamestates_d = FAIL_gamestates;
        end
        M_register_shift = 1'h1;
        M_gamestates_d = IDLE_gamestates;
      end
      CAR1LEFT_gamestates: begin
        currentState = 5'h04;
        M_car1_left = 1'h1;
        M_gamestates_d = IDLE_gamestates;
      end
      CAR1RIGHT_gamestates: begin
        currentState = 5'h08;
        M_car1_right = 1'h1;
        M_gamestates_d = IDLE_gamestates;
      end
      CAR2RIGHT_gamestates: begin
        currentState = 5'h10;
        M_car2_right = 1'h1;
        M_gamestates_d = IDLE_gamestates;
      end
      CAR2LEFT_gamestates: begin
        M_car2_left = 1'h1;
        M_gamestates_d = IDLE_gamestates;
      end
      FAIL_gamestates: begin
        row1 = 96'h00ff0000ff0000ff0000ff00;
        row2 = 96'h00ff0000ff0000ff0000ff00;
        row3 = 96'h00ff0000ff0000ff0000ff00;
        row4 = 96'h00ff0000ff0000ff0000ff00;
        row5 = 96'h00ff0000ff0000ff0000ff00;
        rowcar = 96'h00ff0000ff0000ff0000ff00;
        fail = 1'h1;
      end
    endcase
  end
  
  always @(posedge clk) begin
    M_gamestates_q <= M_gamestates_d;
    
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
    end
  end
  
endmodule
