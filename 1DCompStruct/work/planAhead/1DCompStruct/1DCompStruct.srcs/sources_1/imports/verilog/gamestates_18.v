/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module gamestates_18 (
    input clk,
    input rst,
    input car1left,
    input car1right,
    input car2left,
    input car2right,
    input bigbtn,
    output reg [95:0] row1,
    output reg [95:0] row2,
    output reg [95:0] row3,
    output reg [95:0] row4,
    output reg [95:0] row5,
    output reg [4:0] currentState,
    output reg [7:0] ll1,
    output reg [7:0] ll2,
    output reg [7:0] out,
    output reg fail,
    output reg [3:0] car1Pos,
    output reg [3:0] car2Pos,
    output reg [95:0] rowcar,
    output reg [7:0] debug,
    output reg [15:0] score_out
  );
  
  
  
  localparam START_gamestates = 5'd0;
  localparam IDLE_gamestates = 5'd1;
  localparam SHIFT_gamestates = 5'd2;
  localparam CAR1LEFT_gamestates = 5'd3;
  localparam CAR1RIGHT_gamestates = 5'd4;
  localparam CAR2LEFT_gamestates = 5'd5;
  localparam CAR2RIGHT_gamestates = 5'd6;
  localparam FAIL_gamestates = 5'd7;
  localparam POINT1_gamestates = 5'd8;
  localparam POINT2_gamestates = 5'd9;
  localparam SCORE_gamestates = 5'd10;
  localparam LEVELUP_gamestates = 5'd11;
  localparam CHECK_gamestates = 5'd12;
  localparam READY1_gamestates = 5'd13;
  localparam READY2_gamestates = 5'd14;
  localparam READY3_gamestates = 5'd15;
  localparam LEVEL1_gamestates = 5'd16;
  localparam LEVEL2_gamestates = 5'd17;
  localparam LEVEL3_gamestates = 5'd18;
  localparam WIN_gamestates = 5'd19;
  
  reg [4:0] M_gamestates_d, M_gamestates_q = START_gamestates;
  wire [4-1:0] M_car1_currentPosition;
  reg [1-1:0] M_car1_left;
  reg [1-1:0] M_car1_right;
  reg [1-1:0] M_car1_reset;
  reg [4-1:0] M_car1_position;
  car_26 car1 (
    .clk(clk),
    .rst(rst),
    .left(M_car1_left),
    .right(M_car1_right),
    .reset(M_car1_reset),
    .position(M_car1_position),
    .currentPosition(M_car1_currentPosition)
  );
  wire [4-1:0] M_car2_currentPosition;
  reg [1-1:0] M_car2_left;
  reg [1-1:0] M_car2_right;
  reg [1-1:0] M_car2_reset;
  reg [4-1:0] M_car2_position;
  car_26 car2 (
    .clk(clk),
    .rst(rst),
    .left(M_car2_left),
    .right(M_car2_right),
    .reset(M_car2_reset),
    .position(M_car2_position),
    .currentPosition(M_car2_currentPosition)
  );
  wire [8-1:0] M_register_l1;
  wire [8-1:0] M_register_l2;
  wire [2-1:0] M_register_lane1val;
  wire [2-1:0] M_register_lane2val;
  wire [2-1:0] M_register_lane3val;
  wire [2-1:0] M_register_lane4val;
  wire [96-1:0] M_register_row1;
  wire [96-1:0] M_register_row2;
  wire [96-1:0] M_register_row3;
  wire [96-1:0] M_register_row4;
  wire [96-1:0] M_register_row5;
  wire [8-1:0] M_register_out;
  wire [3-1:0] M_register_level;
  wire [1-1:0] M_register_levelUp;
  reg [1-1:0] M_register_shift;
  reg [1-1:0] M_register_reset;
  reg [1-1:0] M_register_set;
  registers_28 register (
    .clk(clk),
    .rst(rst),
    .shift(M_register_shift),
    .reset(M_register_reset),
    .set(M_register_set),
    .l1(M_register_l1),
    .l2(M_register_l2),
    .lane1val(M_register_lane1val),
    .lane2val(M_register_lane2val),
    .lane3val(M_register_lane3val),
    .lane4val(M_register_lane4val),
    .row1(M_register_row1),
    .row2(M_register_row2),
    .row3(M_register_row3),
    .row4(M_register_row4),
    .row5(M_register_row5),
    .out(M_register_out),
    .level(M_register_level),
    .levelUp(M_register_levelUp)
  );
  reg [24:0] M_counter_d, M_counter_q = 1'h0;
  reg [23:0] M_fast_counter_d, M_fast_counter_q = 1'h0;
  reg [22:0] M_faster_counter_d, M_faster_counter_q = 1'h0;
  reg [24:0] M_readycounter_d, M_readycounter_q = 1'h0;
  reg [4:0] M_loop_d, M_loop_q = 1'h0;
  reg [25:0] M_slow1_d, M_slow1_q = 1'h0;
  reg [15:0] M_score_d, M_score_q = 1'h0;
  reg [15:0] M_high_score_d, M_high_score_q = 1'h0;
  reg [0:0] M_set_d, M_set_q = 1'h0;
  
  reg [7:0] temp_score;
  
  reg [0:0] levelUp;
  
  reg [2:0] level;
  
  reg [7:0] deci_score;
  
  reg [7:0] deci_highscore;
  
  wire [16-1:0] M_alu_c;
  reg [6-1:0] M_alu_alufn;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  alu_19 alu (
    .alufn(M_alu_alufn),
    .a(M_alu_a),
    .b(M_alu_b),
    .c(M_alu_c)
  );
  
  wire [96-1:0] M_ledrowcars_colorrowcar;
  reg [4-1:0] M_ledrowcars_car1;
  reg [4-1:0] M_ledrowcars_car2;
  ledrowcars_30 ledrowcars (
    .car1(M_ledrowcars_car1),
    .car2(M_ledrowcars_car2),
    .colorrowcar(M_ledrowcars_colorrowcar)
  );
  
  wire [96-1:0] M_scoredisplaydigits_tens;
  wire [96-1:0] M_scoredisplaydigits_ones;
  reg [8-1:0] M_scoredisplaydigits_digits;
  reg [24-1:0] M_scoredisplaydigits_color;
  scoredisplaydigits_31 scoredisplaydigits (
    .digits(M_scoredisplaydigits_digits),
    .color(M_scoredisplaydigits_color),
    .tens(M_scoredisplaydigits_tens),
    .ones(M_scoredisplaydigits_ones)
  );
  
  wire [96-1:0] M_highscoredisplaydigits_tens;
  wire [96-1:0] M_highscoredisplaydigits_ones;
  reg [8-1:0] M_highscoredisplaydigits_digits;
  reg [24-1:0] M_highscoredisplaydigits_color;
  scoredisplaydigits_31 highscoredisplaydigits (
    .digits(M_highscoredisplaydigits_digits),
    .color(M_highscoredisplaydigits_color),
    .tens(M_highscoredisplaydigits_tens),
    .ones(M_highscoredisplaydigits_ones)
  );
  
  wire [8-1:0] M_bin_to_dec_score_digits;
  reg [7-1:0] M_bin_to_dec_score_value;
  bin_to_dec_20 bin_to_dec_score (
    .value(M_bin_to_dec_score_value),
    .digits(M_bin_to_dec_score_digits)
  );
  
  wire [8-1:0] M_bin_to_dec_highscore_digits;
  reg [7-1:0] M_bin_to_dec_highscore_value;
  bin_to_dec_20 bin_to_dec_highscore (
    .value(M_bin_to_dec_highscore_value),
    .digits(M_bin_to_dec_highscore_digits)
  );
  
  always @* begin
    M_gamestates_d = M_gamestates_q;
    M_high_score_d = M_high_score_q;
    M_readycounter_d = M_readycounter_q;
    M_slow1_d = M_slow1_q;
    M_set_d = M_set_q;
    M_counter_d = M_counter_q;
    M_score_d = M_score_q;
    M_loop_d = M_loop_q;
    M_fast_counter_d = M_fast_counter_q;
    
    fail = 1'h0;
    M_car1_reset = 1'h0;
    M_car2_reset = 1'h0;
    M_car1_position = 4'h3;
    M_car2_position = 4'h3;
    M_car1_left = car1left;
    M_car1_right = car1right;
    M_car2_left = car2left;
    M_car2_right = car2right;
    car1Pos = M_car1_currentPosition;
    car2Pos = M_car2_currentPosition;
    M_ledrowcars_car1 = M_car1_currentPosition;
    M_ledrowcars_car2 = M_car2_currentPosition;
    currentState[0+0-:1] = 1'h0;
    currentState[1+0-:1] = 1'h0;
    currentState[2+0-:1] = 1'h0;
    row1 = M_register_row1;
    row2 = M_register_row2;
    row3 = M_register_row3;
    row4 = M_register_row4;
    row5 = M_register_row5;
    rowcar = M_ledrowcars_colorrowcar;
    M_register_shift = 1'h0;
    M_register_reset = 1'h0;
    M_register_set = M_set_q;
    ll1 = M_register_l1;
    ll2 = M_register_l2;
    out = M_register_out;
    M_counter_d = M_counter_q + 1'h1;
    M_fast_counter_d = M_fast_counter_q + 1'h1;
    M_alu_alufn = 6'h00;
    M_alu_a = 1'h0;
    M_alu_b = 1'h0;
    score_out = M_score_q;
    debug = M_car2_currentPosition[2+1-:2] & M_register_lane4val;
    M_bin_to_dec_score_value = M_score_q[0+6-:7];
    M_bin_to_dec_highscore_value = M_high_score_q[0+6-:7];
    deci_score = M_bin_to_dec_score_digits;
    deci_highscore = M_bin_to_dec_highscore_digits;
    M_scoredisplaydigits_color = 24'hff00ff;
    M_scoredisplaydigits_digits = deci_score;
    M_highscoredisplaydigits_color = 24'hbda400;
    M_highscoredisplaydigits_digits = deci_highscore;
    levelUp = M_register_levelUp;
    level = M_register_level;
    M_slow1_d = 1'h0;
    M_readycounter_d = 1'h0;
    
    case (M_gamestates_q)
      START_gamestates: begin
        row1 = 96'h0000000000ff00ff00000000;
        row2 = 96'h0000ff0000ff00ff0000ff00;
        row3 = 96'h0000ff0000ff00ff0000ff00;
        row4 = 96'h0000ff0000ff00ff0000ff00;
        row5 = 96'h0000ff0000ff00ff0000ff00;
        rowcar = 96'h0000000000ff00ff00000000;
        M_slow1_d = M_slow1_q + 1'h1;
        if (M_slow1_q == 25'h1ffffff) begin
          M_loop_d = M_loop_q + 1'h1;
          if (M_loop_q == 3'h5) begin
            M_loop_d = 1'h0;
          end
        end
        
        case (M_loop_q)
          2'h2: begin
            row1 = 96'h0000000000ff00ff00000000;
            row2 = 96'h0000ff0000ff00ff0000ff00;
            row3 = 96'h0000ff0000ff00ff0000ff00;
            row4 = 96'h000000000000000000000000;
            row5 = 96'h000000000000000000000000;
            rowcar = 96'h000000000000000000000000;
          end
          2'h3: begin
            row1 = 96'h000000000000000000000000;
            row2 = 96'h000000000000000000000000;
            row3 = 96'h000000000000000000000000;
            row4 = 96'h0000ff0000ff00ff0000ff00;
            row5 = 96'h0000ff0000ff00ff0000ff00;
            rowcar = 96'h0000000000ff00ff00000000;
          end
          3'h4: begin
            row1 = 96'h0000000000ff000000000000;
            row2 = 96'h0000ff0000ff000000000000;
            row3 = 96'h0000ff0000ff000000000000;
            row4 = 96'h00000000000000ff0000ff00;
            row5 = 96'h00000000000000ff0000ff00;
            rowcar = 96'h00000000000000ff00000000;
          end
          3'h5: begin
            row1 = 96'h00000000000000ff00000000;
            row2 = 96'h00000000000000ff0000ff00;
            row3 = 96'h00000000000000ff0000ff00;
            row4 = 96'h0000ff0000ff000000000000;
            row5 = 96'h0000ff0000ff000000000000;
            rowcar = 96'h0000000000ff000000000000;
          end
          default: begin
            row1 = 96'h0000000000ff00ff00000000;
            row2 = 96'h0000ff0000ff00ff0000ff00;
            row3 = 96'h0000ff0000ff00ff0000ff00;
            row4 = 96'h0000ff0000ff00ff0000ff00;
            row5 = 96'h0000ff0000ff00ff0000ff00;
            rowcar = 96'h0000000000ff00ff00000000;
          end
        endcase
        currentState = 5'h03;
        if (bigbtn) begin
          M_register_reset = 1'h1;
          M_loop_d = 1'h0;
          M_score_d = 1'h0;
          M_gamestates_d = READY1_gamestates;
        end
      end
      READY1_gamestates: begin
        row1 = 96'h0000ff0000ff0000ff0000ff;
        row2 = 96'h000000000000000000000000;
        row3 = 96'h000000000000000000000000;
        row4 = 96'h000000000000000000000000;
        row5 = 96'h000000000000000000000000;
        rowcar = 96'h000000000000000000000000;
        M_readycounter_d = M_readycounter_q + 1'h1;
        if (M_readycounter_q == 25'h1ffffff) begin
          M_gamestates_d = READY2_gamestates;
        end
      end
      READY2_gamestates: begin
        row1 = 96'h0000ff0000ff0000ff0000ff;
        row2 = 96'h0000ff0000ff0000ff0000ff;
        row3 = 96'h0000ff0000ff0000ff0000ff;
        row4 = 96'h000000000000000000000000;
        row5 = 96'h000000000000000000000000;
        rowcar = 96'h000000000000000000000000;
        M_readycounter_d = M_readycounter_q + 1'h1;
        if (M_readycounter_q == 25'h1ffffff) begin
          M_gamestates_d = READY3_gamestates;
        end
      end
      READY3_gamestates: begin
        row1 = 96'h0000ff0000ff0000ff0000ff;
        row2 = 96'h0000ff0000ff0000ff0000ff;
        row3 = 96'h0000ff0000ff0000ff0000ff;
        row4 = 96'h0000ff0000ff0000ff0000ff;
        row5 = 96'h0000ff0000ff0000ff0000ff;
        rowcar = 96'h0000ff0000ff0000ff0000ff;
        M_readycounter_d = M_readycounter_q + 1'h1;
        if (M_readycounter_q == 25'h1ffffff) begin
          M_gamestates_d = LEVELUP_gamestates;
        end
      end
      IDLE_gamestates: begin
        currentState = 5'h01;
        if ((level == 2'h1) || (level == 2'h2)) begin
          if (M_counter_q == 25'h1ffffff) begin
            M_gamestates_d = CHECK_gamestates;
          end
        end else begin
          if (M_fast_counter_q == 24'hffffff) begin
            M_gamestates_d = CHECK_gamestates;
          end
        end
        if (car1left) begin
          M_gamestates_d = CAR1LEFT_gamestates;
        end
        if (car1right) begin
          M_gamestates_d = CAR1RIGHT_gamestates;
        end
        if (car2left) begin
          M_gamestates_d = CAR2LEFT_gamestates;
        end
        if (car2right) begin
          M_gamestates_d = CAR2RIGHT_gamestates;
        end
        if (levelUp) begin
          M_gamestates_d = LEVELUP_gamestates;
        end
        if (bigbtn) begin
          M_gamestates_d = SCORE_gamestates;
        end
      end
      CHECK_gamestates: begin
        M_gamestates_d = SHIFT_gamestates;
        if ((M_car1_currentPosition[0+1-:2] & M_register_lane1val) == 2'h2) begin
          M_gamestates_d = POINT1_gamestates;
        end
        if ((M_car1_currentPosition[2+1-:2] & M_register_lane2val) == 2'h2) begin
          M_gamestates_d = POINT1_gamestates;
        end
        if ((M_car2_currentPosition[0+1-:2] & M_register_lane3val) == 2'h1) begin
          M_gamestates_d = POINT1_gamestates;
        end
        if ((M_car2_currentPosition[2+1-:2] & M_register_lane4val) == 2'h1) begin
          M_gamestates_d = POINT1_gamestates;
        end
        if (((M_car1_currentPosition[0+1-:2] & M_register_lane1val) == 2'h2) && ((M_car2_currentPosition[0+1-:2] & M_register_lane3val) == 2'h1)) begin
          M_gamestates_d = POINT2_gamestates;
        end
        if (((M_car1_currentPosition[0+1-:2] & M_register_lane1val) == 2'h2) && ((M_car2_currentPosition[2+1-:2] & M_register_lane4val) == 2'h1)) begin
          M_gamestates_d = POINT2_gamestates;
        end
        if (((M_car1_currentPosition[2+1-:2] & M_register_lane2val) == 2'h2) && ((M_car2_currentPosition[0+1-:2] & M_register_lane3val) == 2'h1)) begin
          M_gamestates_d = POINT2_gamestates;
        end
        if (((M_car1_currentPosition[2+1-:2] & M_register_lane2val) == 2'h2) && ((M_car2_currentPosition[2+1-:2] & M_register_lane4val) == 2'h1)) begin
          M_gamestates_d = POINT2_gamestates;
        end
        if ((M_car1_currentPosition[0+1-:2] & M_register_lane1val) == 2'h1) begin
          M_gamestates_d = FAIL_gamestates;
        end
        if ((M_car1_currentPosition[2+1-:2] & M_register_lane2val) == 2'h1) begin
          M_gamestates_d = FAIL_gamestates;
        end
        if ((M_car2_currentPosition[0+1-:2] & M_register_lane3val) == 2'h2) begin
          M_gamestates_d = FAIL_gamestates;
        end
        if ((M_car2_currentPosition[2+1-:2] & M_register_lane4val) == 2'h2) begin
          M_gamestates_d = FAIL_gamestates;
        end
      end
      SHIFT_gamestates: begin
        currentState = 5'h02;
        M_loop_d = M_loop_q + 1'h1;
        M_register_shift = 1'h1;
        if (M_loop_q == 2'h3) begin
          M_loop_d = 1'h0;
          M_gamestates_d = IDLE_gamestates;
        end
      end
      CAR1LEFT_gamestates: begin
        currentState = 5'h04;
        M_car1_left = 1'h1;
        M_gamestates_d = IDLE_gamestates;
      end
      CAR1RIGHT_gamestates: begin
        currentState = 5'h08;
        M_car1_right = 1'h1;
        M_gamestates_d = IDLE_gamestates;
      end
      CAR2RIGHT_gamestates: begin
        currentState = 5'h10;
        M_car2_right = 1'h1;
        M_gamestates_d = IDLE_gamestates;
      end
      CAR2LEFT_gamestates: begin
        M_car2_left = 1'h1;
        M_gamestates_d = IDLE_gamestates;
      end
      FAIL_gamestates: begin
        M_loop_d = 1'h0;
        currentState = 5'h07;
        row1 = 96'h00ff0000ff0000ff0000ff00;
        row2 = 96'h00ff0000ff0000ff0000ff00;
        row3 = 96'h00ff0000ff0000ff0000ff00;
        row4 = 96'h00ff0000ff0000ff0000ff00;
        row5 = 96'h00ff0000ff0000ff0000ff00;
        rowcar = 96'h00ff0000ff0000ff0000ff00;
        fail = 1'h1;
        if (bigbtn) begin
          M_gamestates_d = SCORE_gamestates;
        end
      end
      SCORE_gamestates: begin
        currentState = 5'h0f;
        row1 = M_scoredisplaydigits_tens;
        row2 = M_scoredisplaydigits_ones;
        row3 = 96'h000000000000000000000000;
        row4 = M_highscoredisplaydigits_tens;
        row5 = M_highscoredisplaydigits_ones;
        rowcar = 96'h000000000000000000000000;
        M_alu_alufn = 6'h35;
        M_alu_a = M_high_score_q;
        M_alu_b = M_score_q;
        M_fast_counter_d = M_fast_counter_q + 1'h1;
        if (M_fast_counter_q == 24'hffffff) begin
          M_loop_d = M_loop_q + 1'h1;
          if (M_loop_q == 2'h3) begin
            M_loop_d = 1'h0;
          end
        end
        if (M_loop_q == 1'h0) begin
          row3 = 96'h00ff7800ff78000000000000;
          rowcar = 96'h00ff7800ff78000000000000;
        end else begin
          if (M_loop_q == 1'h1) begin
            row3 = 96'h00000000ff7800ff78000000;
            rowcar = 96'h00000000ff7800ff78000000;
          end else begin
            if (M_loop_q == 2'h2) begin
              row3 = 96'h00000000000000ff7800ff78;
              rowcar = 96'h00000000000000ff7800ff78;
            end else begin
              if (M_loop_q == 2'h3) begin
                row3 = 96'h00ff7800000000000000ff78;
                rowcar = 96'h00ff7800000000000000ff78;
              end
            end
          end
        end
        if (M_alu_c) begin
          M_high_score_d = M_score_q;
        end
        if (bigbtn) begin
          M_set_d = M_set_q + 1'h1;
          M_gamestates_d = START_gamestates;
        end
      end
      POINT1_gamestates: begin
        M_alu_a = M_score_q;
        M_alu_b = 16'h0001;
        M_score_d = M_alu_c;
        M_gamestates_d = SHIFT_gamestates;
      end
      POINT2_gamestates: begin
        M_alu_a = M_score_q;
        M_alu_b = 16'h0002;
        M_score_d = M_alu_c;
        M_gamestates_d = SHIFT_gamestates;
      end
      LEVELUP_gamestates: begin
        M_slow1_d = M_slow1_q + 1'h1;
        if (M_slow1_q == 26'h3ffffff) begin
          M_gamestates_d = IDLE_gamestates;
        end
        if (level == 2'h1) begin
          row1 = 96'h00000000ff78000000000000;
          row2 = 96'h00000000ff7800ff78000000;
          row3 = 96'h00000000ff78000000000000;
          row4 = 96'h00000000ff78000000000000;
          row5 = 96'h00000000ff78000000000000;
          rowcar = 96'h000000000000000000000000;
        end
        if (level == 2'h2) begin
          row1 = 96'h00ff7800ff7800ff7800ff78;
          row2 = 96'h00ff78000000000000000000;
          row3 = 96'h00ff7800ff7800ff7800ff78;
          row4 = 96'h00000000000000000000ff78;
          row5 = 96'h00ff7800ff7800ff7800ff78;
          rowcar = 96'h000000000000000000000000;
        end
        if (level == 2'h3) begin
          row1 = 96'h00ff7800ff7800ff7800ff78;
          row2 = 96'h00ff78000000000000000000;
          row3 = 96'h00ff7800ff7800ff7800ff78;
          row4 = 96'h00ff78000000000000000000;
          row5 = 96'h00ff7800ff7800ff7800ff78;
          rowcar = 96'h000000000000000000000000;
        end
        if (level == 3'h4) begin
          row1 = 96'h00ff7800000000000000ff78;
          row2 = 96'h00ff7800000000000000ff78;
          row3 = 96'h00ff7800ff7800ff7800ff78;
          row4 = 96'h00ff78000000000000000000;
          row5 = 96'h00ff78000000000000000000;
          rowcar = 96'h000000000000000000000000;
        end
        if (level == 3'h5) begin
          M_gamestates_d = WIN_gamestates;
        end
        if (bigbtn) begin
          M_slow1_d = 1'h0;
          M_gamestates_d = SCORE_gamestates;
        end
      end
      WIN_gamestates: begin
        row1 = 96'h0000ff0000ff0000ff0000ff;
        row2 = 96'h0000ff0000ff0000ff0000ff;
        row3 = 96'h0000ff0000ff0000ff0000ff;
        row4 = 96'h0000ff0000ff0000ff0000ff;
        row5 = 96'h0000ff0000ff0000ff0000ff;
        rowcar = 96'h0000ff0000ff0000ff0000ff;
        if (bigbtn) begin
          M_gamestates_d = SCORE_gamestates;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    M_gamestates_q <= M_gamestates_d;
    
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
      M_fast_counter_q <= 1'h0;
      M_faster_counter_q <= 1'h0;
      M_readycounter_q <= 1'h0;
      M_loop_q <= 1'h0;
      M_slow1_q <= 1'h0;
      M_score_q <= 1'h0;
      M_high_score_q <= 1'h0;
      M_set_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
      M_fast_counter_q <= M_fast_counter_d;
      M_faster_counter_q <= M_faster_counter_d;
      M_readycounter_q <= M_readycounter_d;
      M_loop_q <= M_loop_d;
      M_slow1_q <= M_slow1_d;
      M_score_q <= M_score_d;
      M_high_score_q <= M_high_score_d;
      M_set_q <= M_set_d;
    end
  end
  
endmodule
